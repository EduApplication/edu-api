// <auto-generated />
using System;
using Edu.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Edu.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250516100847_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Edu.Api.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("ATTACHMENTS", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ClassTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Section")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassTeacherId");

                    b.ToTable("CLASSES", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.ClassSubjectTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherSubjectId");

                    b.ToTable("CLASSES_SUBJECTS_TEACHERS", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.ToTable("DOCUMENTS", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("GradeTypeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("GRADES", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.GradeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("GRADE_TYPES", "main");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Regular lesson grade",
                            Name = "Current",
                            Weight = 0.5f
                        },
                        new
                        {
                            Id = 2,
                            Description = "Comprehensive assessment or test",
                            Name = "Control",
                            Weight = 1f
                        });
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ClassSubjectTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Room")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClassSubjectTeacherId");

                    b.ToTable("LESSONS", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.ParentStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("PARENTS_STUDENTS", "users");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ROLES", "users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "System administrator with full access",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Educational staff responsible for teaching",
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Primary user of the educational platform",
                            Name = "Student"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Guardian or parent of a student",
                            Name = "Parent"
                        });
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("STUDENTS_CLASSES", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SUBJECTS", "main");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06bc44e2-d0d5-419e-8a91-3d56c098127e"),
                            Description = "Study of numbers, quantities, and shapes",
                            IsActive = true,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = new Guid("818472a6-c30e-462b-80b1-5abd20c01798"),
                            Description = "Study of matter, energy, and the interaction between them",
                            IsActive = true,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = new Guid("2dd4aa9b-3023-42f6-91d4-373fc9e0b3d7"),
                            Description = "Study of substances, their properties, structure, and the changes they undergo",
                            IsActive = true,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("eee7445a-246a-4178-b27a-85045f5d46af"),
                            Description = "Study of living organisms and their interactions with each other and the environment",
                            IsActive = true,
                            Name = "Biology"
                        },
                        new
                        {
                            Id = new Guid("8126aa6e-14d8-4e13-b198-4d46d052c92d"),
                            Description = "Study of English language and literature",
                            IsActive = true,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.TeacherSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TEACHERS_SUBJECTS", "main");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("USERS", "users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99e4fd1f-c01f-4c27-8944-867dc176beef"),
                            Email = "admin@eduportal.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            PasswordHash = "$2a$11$Hwe0Mu32xSVmK0mLXjtUJ.lS7Iuf7QAwwO8bR4QkmrMAWmc4Olj/y",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("2c90cdcd-ab04-475d-aa89-c68eeb8a77a9"),
                            Email = "math.teacher@eduportal.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Smith",
                            PasswordHash = "$2a$11$zeMb2CTgKY.KDZjfCVgx0OfQYWj9kHq1FYjZt0/TKj3bHke0qT3qS",
                            PhoneNumber = "+1234567890",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("4d59cade-9f03-4f86-ae69-2971c81f1677"),
                            Email = "physics.teacher@eduportal.com",
                            FirstName = "Emma",
                            IsActive = true,
                            LastName = "Johnson",
                            PasswordHash = "$2a$11$zeMb2CTgKY.KDZjfCVgx0OfQYWj9kHq1FYjZt0/TKj3bHke0qT3qS",
                            PhoneNumber = "+1234567891",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("b7831597-76b2-426a-99ab-e7679c82f98e"),
                            Email = "chemistry.teacher@eduportal.com",
                            FirstName = "Michael",
                            IsActive = true,
                            LastName = "Brown",
                            PasswordHash = "$2a$11$zeMb2CTgKY.KDZjfCVgx0OfQYWj9kHq1FYjZt0/TKj3bHke0qT3qS",
                            PhoneNumber = "+1234567892",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("389f8a93-b46c-47ef-b27c-1a85dd4183b0"),
                            Email = "biology.teacher@eduportal.com",
                            FirstName = "Olivia",
                            IsActive = true,
                            LastName = "Davis",
                            PasswordHash = "$2a$11$zeMb2CTgKY.KDZjfCVgx0OfQYWj9kHq1FYjZt0/TKj3bHke0qT3qS",
                            PhoneNumber = "+1234567893",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("10fce7fb-edd8-4f29-899a-0ac145021f9a"),
                            Email = "english.teacher@eduportal.com",
                            FirstName = "James",
                            IsActive = true,
                            LastName = "Wilson",
                            PasswordHash = "$2a$11$zeMb2CTgKY.KDZjfCVgx0OfQYWj9kHq1FYjZt0/TKj3bHke0qT3qS",
                            PhoneNumber = "+1234567894",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Attachments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Class", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.User", "ClassTeacher")
                        .WithMany("ClassesAsTutor")
                        .HasForeignKey("ClassTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassTeacher");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.ClassSubjectTeacher", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.Class", "Class")
                        .WithMany("ClassSubjectTeacher")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Edu.Api.Domain.Entities.TeacherSubject", "TeacherSubject")
                        .WithMany("ClassSubjectTeacher")
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("TeacherSubject");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Document", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.Attachment", "Attachment")
                        .WithMany("Documents")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Grade", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.GradeType", "GradeType")
                        .WithMany("Grades")
                        .HasForeignKey("GradeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Edu.Api.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Edu.Api.Domain.Entities.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Edu.Api.Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GradeType");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.ClassSubjectTeacher", "ClassSubjectTeacher")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassSubjectTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubjectTeacher");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.ParentStudent", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.User", "Parent")
                        .WithMany("ParentRelationships")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Edu.Api.Domain.Entities.User", "Student")
                        .WithMany("StudentRelationships")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.StudentClass", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Edu.Api.Domain.Entities.User", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.TeacherSubject", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Edu.Api.Domain.Entities.User", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.User", b =>
                {
                    b.HasOne("Edu.Api.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Attachment", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Class", b =>
                {
                    b.Navigation("ClassSubjectTeacher");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.ClassSubjectTeacher", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.GradeType", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.TeacherSubject", b =>
                {
                    b.Navigation("ClassSubjectTeacher");
                });

            modelBuilder.Entity("Edu.Api.Domain.Entities.User", b =>
                {
                    b.Navigation("ClassesAsTutor");

                    b.Navigation("ParentRelationships");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentRelationships");

                    b.Navigation("TeacherSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
